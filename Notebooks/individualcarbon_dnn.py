# -*- coding: utf-8 -*-
"""IndividualCarbon_DNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gPR_5yIkU9kmj4HnHxvuJkPi30jV81uG
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.compose import ColumnTransformer, make_column_selector
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.model_selection import train_test_split




# import the data
df = pd.read_csv('Carbon Emission.csv')
df.head()

df.info()

df.isnull().sum()

# Vehicle Type can be null, maybe Vehicle type is set to null
# if the person doesn't have a car? Check Transport value
nullVehicleType = df.loc[df['Vehicle Type'].isnull()]
nullVehicleType['Transport'].unique()

# When vehicle type is null, Transport is either public or walk/bicycle
# So vehicle type null means the person doesn't use a private car for transportation

# Replace null vehicle type with 'None'
dfNonNull = df.fillna('None')
print(dfNonNull.isnull().sum())

dfNonNull.head()

"""Note: I don't know how to make Joshua's SimpleImputer/StandardScaler/OneHotEncoder pipeline to work with the Sequential() Model. So I just use "dumb" mapping of string to numbers for now to make all columns numeric... let's see if we can improve on these mapping later


"""

# Get unique values for each categorical columns
print(dfNonNull['Body Type'].unique())
print(dfNonNull['Sex'].unique())
print(dfNonNull['Diet'].unique())
print(dfNonNull['How Often Shower'].unique())
print(dfNonNull['Heating Energy Source'].unique())
print(dfNonNull['Transport'].unique())
print(dfNonNull['Vehicle Type'].unique())
print(dfNonNull['Social Activity'].unique())
print(dfNonNull['Frequency of Traveling by Air'].unique())
print(dfNonNull['Waste Bag Size'].unique())
print(dfNonNull['Energy efficiency'].unique())
print(dfNonNull['Recycling'].unique())
print(dfNonNull['Cooking_With'].unique())

# Encode categorical columns to numeric
dfNonNull['Body Type'] = dfNonNull['Body Type'].map({'overweight': 0, 'obese': 1, 'underweight': 2, 'normal': 3})
dfNonNull['Sex'] = dfNonNull['Sex'].map({'female': 0, 'male': 1})
dfNonNull['Diet'] = dfNonNull['Diet'].map({'pescatarian': 0, 'vegetarian': 1, 'omnivore': 2, 'vegan': 3})
dfNonNull['How Often Shower'] = dfNonNull['How Often Shower'].map({'daily': 0, 'less frequently': 1, 'more frequently': 2, 'twice a day': 3})
dfNonNull['Heating Energy Source'] = dfNonNull['Heating Energy Source'].map({'coal': 0, 'natural gas': 1, 'wood': 2, 'electricity': 3})
dfNonNull['Transport'] = dfNonNull['Transport'].map({'public': 0, 'walk/bicycle': 1, 'private': 2})
dfNonNull['Vehicle Type'] = dfNonNull['Vehicle Type'].map({'None': 0, 'petrol': 1, 'diesel': 2, 'hybrid': 3, 'lpg': 4, 'electric': 5})
dfNonNull['Social Activity'] = dfNonNull['Social Activity'].map({'often': 0, 'never': 1, 'sometimes': 2})
dfNonNull['Frequency of Traveling by Air'] = dfNonNull['Frequency of Traveling by Air'].map({'frequently': 0, 'rarely': 1, 'never': 2, 'very frequently': 3})
dfNonNull['Waste Bag Size'] = dfNonNull['Waste Bag Size'].map({'large': 0, 'extra large': 1, 'small': 2, 'medium': 3})
dfNonNull['Energy efficiency'] = dfNonNull['Energy efficiency'].map({'No': 0, 'Sometimes': 1, 'Yes': 2})

dfNonNull.info()

dfNonNull.head()

# Drop Recycling and Cooking_With columns for now -- encode the lists later
dfNonNull = dfNonNull.drop('Recycling', axis=1)
dfNonNull = dfNonNull.drop('Cooking_With', axis=1)
dfNonNull.head()

# split the dataset into test/train
# this creams a new dataframe with the target variable removed
x = dfNonNull.drop(columns=['CarbonEmission'])
# this creates a new dataframe with only the target variable
y = dfNonNull[['CarbonEmission']]

# split the data into test/train
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

# check the shape
print(x_train.shape, y_train.shape)

"""The Deep Neural Network code is based on examples here:
https://www.tensorflow.org/tutorials/keras/regression#regression_with_a_deep_neural_network_dnn
"""

from tensorflow import keras

normalizer = keras.layers.Normalization(axis=-1)
normalizer.adapt(np.array(x_train))

model = keras.models.Sequential()
model.add(normalizer)
model.add(keras.layers.Dense(units=64, activation='relu'))
model.add(keras.layers.BatchNormalization())
model.add(keras.layers.Dense(units=64, activation='relu'))
model.add(keras.layers.BatchNormalization())
model.add(keras.layers.Dense(units=1))

model.compile(loss='mean_absolute_error',
              optimizer=keras.optimizers.Adam(0.001))
model.summary()

# check for accuracy
model.evaluate(x_test, y_test)


# Fit the model
model.fit(x_train, y_train, epochs=100, validation_split=0.2)

for i in range(10):
    person = x_test.sample()
    carbon_emission = y_test.loc[person.index]
    predicted_carbon_emission = model.predict(person)
    print(f'Actual Carbon Emission: {carbon_emission.values[0]}')
    print(f'Predicted Carbon Emission: {predicted_carbon_emission[0]}')
    print()